{"ast":null,"code":"var _jsxFileName = \"/Users/teejay/Documents/PersonalCode/ReactProjects/react-meetup-app/src/pages/AllMeetups.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllMeetupsPage() {\n  _s();\n  {/* - This useState hook is true when the fetch hasnt returned the promise yet aka is still loading*/}\n  const [isLoading, setIsLoading] = useState(true);\n  {/* - This useState hook is initiated with and empty array which will eventually hold an array of data from fetch */}\n  const [loadedMeetups, setLoadedMeetups] = useState([]);\n  {/* - useEffect is a hook that holds two arguments. \n      - This first argument is an arrow function that contains the fetch 'getting data'\n      - The second argument determines when the useEffect function will run, Since the secon argument \n          is an empty array, it will only run once everytime the page is loaded*/}\n  useEffect(() => {\n    {/* Loading is true until fetch finished */}\n    setIsLoading(true);\n    {/* fetch with only the link since we are retrieving data*/}\n    fetch(\"https://react-getting-started-19fd9-default-rtdb.firebaseio.com/meetups.json\").then(response => {\n      {/* .then() retrieves the results from the previous function which is fetch in this case\n            it then holds response as an argument in the arrow function */}\n      return response.json();\n      {/* .json parses the json formatted fetch response into jsx */}\n    }).then(data => {\n      {/* we get the returned results from the previous .then and put it in the hold argument*/}\n      const meetups = [];\n      {/* creating an empty array that will hold final fetch results */}\n      {/* for in loop. For every key in data aka fetch response, \n          we create an object named meetup and store the data inside */}\n      {/* */}\n      for (const key in data) {\n        const meetup = {\n          id: key,\n          ...data[key]\n        };\n        meetups.push(meetup);\n      }\n      setIsLoading(false);\n      setLoadedMeetups(meetups);\n    });\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Meetups\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: loadedMeetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(AllMeetupsPage, \"JeEKF2tZ58/s7PjUTNq9ybMF8W0=\");\n_c = AllMeetupsPage;\nexport default AllMeetupsPage;\nvar _c;\n$RefreshReg$(_c, \"AllMeetupsPage\");","map":{"version":3,"names":["React","useState","useEffect","MeetupList","jsxDEV","_jsxDEV","AllMeetupsPage","_s","isLoading","setIsLoading","loadedMeetups","setLoadedMeetups","fetch","then","response","json","data","meetups","key","meetup","id","push","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/teejay/Documents/PersonalCode/ReactProjects/react-meetup-app/src/pages/AllMeetups.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nfunction AllMeetupsPage() {\n\n  {/* - This useState hook is true when the fetch hasnt returned the promise yet aka is still loading*/}\n  const [isLoading, setIsLoading] = useState(true);\n  {/* - This useState hook is initiated with and empty array which will eventually hold an array of data from fetch */}\n  const [loadedMeetups, setLoadedMeetups] = useState([]);\n\n  {/* - useEffect is a hook that holds two arguments. \n      - This first argument is an arrow function that contains the fetch 'getting data'\n      - The second argument determines when the useEffect function will run, Since the secon argument \n          is an empty array, it will only run once everytime the page is loaded*/}\n  useEffect(() => {\n    {/* Loading is true until fetch finished */}\n    setIsLoading(true);\n\n    {/* fetch with only the link since we are retrieving data*/}\n    fetch(\n      \"https://react-getting-started-19fd9-default-rtdb.firebaseio.com/meetups.json\"\n    )\n      .then((response) => { {/* .then() retrieves the results from the previous function which is fetch in this case\n                                  it then holds response as an argument in the arrow function */}\n        return response.json(); {/* .json parses the json formatted fetch response into jsx */}\n      })\n      .then((data) => {     {/* we get the returned results from the previous .then and put it in the hold argument*/}\n        const meetups = []; {/* creating an empty array that will hold final fetch results */}\n\n        {/* for in loop. For every key in data aka fetch response, \n            we create an object named meetup and store the data inside */}\n            {/* */}\n        for (const key in data) {\n          const meetup = {\n            id: key,\n            ...data[key], \n          };\n          \n          meetups.push(meetup);\n        }\n\n        setIsLoading(false);\n        setLoadedMeetups(meetups);\n      });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <section>\n        <p>Loading...</p>\n      </section>\n    );\n  }\n\n  return (\n    <section>\n      <h1>All Meetups</h1>\n      {/* MeetupList is a function that takes an array of objects aka (data) passed through a prop called 'meetups' and will map through all the object variables\n            and get it formatted by another component */}\n      <MeetupList meetups={loadedMeetups} />\n    </section>\n  );\n}\n\nexport default AllMeetupsPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,UAAU,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAExB,CAAC;EACD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,CAAC;EACD,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtD,CAAC;AACH;AACA;AACA,iFAHG;EAIDC,SAAS,CAAC,MAAM;IACd,CAAC;IACDO,YAAY,CAAC,IAAI,CAAC;IAElB,CAAC;IACDG,KAAK,CACH,8EAA8E,CAC/E,CACEC,IAAI,CAAEC,QAAQ,IAAK;MAAE,CAAC;AAC7B,0EAD6B;MAErB,OAAOA,QAAQ,CAACC,IAAI,EAAE;MAAE,CAAC;IAC3B,CAAC,CAAC,CACDF,IAAI,CAAEG,IAAI,IAAK;MAAM,CAAC;MACrB,MAAMC,OAAO,GAAG,EAAE;MAAE,CAAC;MAErB,CAAC;AACT,uEADS;MAEG,CAAC;MACL,KAAK,MAAMC,GAAG,IAAIF,IAAI,EAAE;QACtB,MAAMG,MAAM,GAAG;UACbC,EAAE,EAAEF,GAAG;UACP,GAAGF,IAAI,CAACE,GAAG;QACb,CAAC;QAEDD,OAAO,CAACI,IAAI,CAACF,MAAM,CAAC;MACtB;MAEAV,YAAY,CAAC,KAAK,CAAC;MACnBE,gBAAgB,CAACM,OAAO,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIT,SAAS,EAAE;IACb,oBACEH,OAAA;MAAAiB,QAAA,eACEjB,OAAA;QAAAiB,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACT;EAEd;EAEA,oBACErB,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAGpBrB,OAAA,CAACF,UAAU;MAACc,OAAO,EAAEP;IAAc;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC9B;AAEd;AAACnB,EAAA,CA3DQD,cAAc;AAAAqB,EAAA,GAAdrB,cAAc;AA6DvB,eAAeA,cAAc;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
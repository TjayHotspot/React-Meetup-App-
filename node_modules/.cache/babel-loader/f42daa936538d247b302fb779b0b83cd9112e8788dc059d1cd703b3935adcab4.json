{"ast":null,"code":"var _jsxFileName = \"/Users/teejay/Documents/PersonalCode/ReactProjects/react-meetup-app/src/store/favorites-context.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{/* createContext is js object that is stored in a const and will contain a react component\n    - Thats why FavoritesContext starts with capital\n    - CreateContext also take initial value for the \"component wide state\"\n     */}\nconst FavoritesContext = /*#__PURE__*/createContext({\n  favorites: [],\n  totalFavorites: 0,\n  addFavorite: favoriteMeetup => {},\n  removeFavorite: meetupID => {},\n  itemIsFavorite: meetupId => {}\n});\n{/* ^^ the last 3 methods are just for intellecense (they dont do anything) ^^ */}\n{/* React component function that updates FavoritesContext values\n    - its also responsible for sharing the FavoritesContext values to any interested components */}\nexport function FavoritesContextProvider(props) {\n  _s();\n  {/* used for updating userFavorites inside the context */}\n  const [userFavorites, setUserFavorites] = useState([]);\n  {/* Adds new favorites meetup.. old array + new item(s). \n      - Nested function allows for useState to update right away \n      - .Concat is a component that take the previous value and concats \n          (returns the old one plus new value given in paramater)*/}\n  function addFavoriteHandler(favoriteMeetup) {\n    setUserFavorites(prevUsersFavorites => {\n      return prevUsersFavorites.concat(favoriteMeetup);\n    });\n  }\n  {/* Removes favorite meetup by specified ID\n      - Nested function allows for useState to update imeditatly\n      - .filter returns new array that will 'filter' out any paramater given\n          - filter takes function as argument which executes for every item in the array\n          - returns true to keep the item and false to get rid of it\n          - 'meetup' param is/iterates every value in the prevUserFavorites array*/}\n  function removeFavoriteHandler(meetupId) {\n    setUserFavorites(prevUsersFavorites => {\n      return prevUsersFavorites.filter(meetup => meetup.id !== meetupId);\n    });\n  }\n  {/* This returns true or false\n      - .some wants function for argument with 'method' contains/iterates every value for userFavorites*/}\n  function itemIsFavoriteHandler(meetupId) {\n    return userFavorites.some(meetup => meetup.id === meetupId);\n  }\n  {/* holds the updated context values from use state \n      - Stores functions which can be access/called by other components*/}\n  const context = {\n    favorites: userFavorites,\n    totalFavorites: userFavorites.length,\n    addFavorite: addFavoriteHandler,\n    removeFavorite: removeFavoriteHandler,\n    itemIsFavorite: itemIsFavoriteHandler\n  };\n  {/*FavoritesContext.Provider\n      -.Provider is a component that createContext or FavoritesContext has built in\n      -Open and close tags need to be wrapped around all components that are interested in interacting with FavoritesContext \n      - value={context}, context is a value that is used with use state and other functions to keep the conext up to date*/\n  }\n  {/* The FavoriteContextProvider will be used in index.js to wrap around the entire app,\n      - FavoriteContextProvider takes a prop which will be the any comonents that FavoriteContextProvider wraps around \n      - those props have are called children since nested in between this component function*/\n  }\n  return /*#__PURE__*/_jsxDEV(FavoritesContext.Provider, {\n    value: context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(FavoritesContextProvider, \"UlopS2AxBLjN23/y+OKS+T5dH2M=\");\n_c = FavoritesContextProvider;\nexport default FavoritesContext;\nvar _c;\n$RefreshReg$(_c, \"FavoritesContextProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","FavoritesContext","favorites","totalFavorites","addFavorite","favoriteMeetup","removeFavorite","meetupID","itemIsFavorite","meetupId","FavoritesContextProvider","props","_s","userFavorites","setUserFavorites","addFavoriteHandler","prevUsersFavorites","concat","removeFavoriteHandler","filter","meetup","id","itemIsFavoriteHandler","some","context","length","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/teejay/Documents/PersonalCode/ReactProjects/react-meetup-app/src/store/favorites-context.js"],"sourcesContent":["import React from \"react\";\nimport { createContext, useState } from \"react\";\n\n\n{/* createContext is js object that is stored in a const and will contain a react component\n    - Thats why FavoritesContext starts with capital\n    - CreateContext also take initial value for the \"component wide state\"\n     */}\nconst FavoritesContext = createContext({\n  favorites: [],\n  totalFavorites: 0,\n  addFavorite: (favoriteMeetup) => {},\n  removeFavorite: (meetupID) => {},\n  itemIsFavorite: (meetupId) => {},\n});{/* ^^ the last 3 methods are just for intellecense (they dont do anything) ^^ */}\n\n\n{/* React component function that updates FavoritesContext values\n    - its also responsible for sharing the FavoritesContext values to any interested components */}\nexport function FavoritesContextProvider(props) {\n\n      {/* used for updating userFavorites inside the context */}\n  const [userFavorites, setUserFavorites] = useState([]);\n\n\n      {/* Adds new favorites meetup.. old array + new item(s). \n          - Nested function allows for useState to update right away \n          - .Concat is a component that take the previous value and concats \n              (returns the old one plus new value given in paramater)*/}\n  function addFavoriteHandler(favoriteMeetup){\n    setUserFavorites((prevUsersFavorites) => {\n        return prevUsersFavorites.concat(favoriteMeetup);\n    })\n  }\n\n      {/* Removes favorite meetup by specified ID\n          - Nested function allows for useState to update imeditatly\n          - .filter returns new array that will 'filter' out any paramater given\n              - filter takes function as argument which executes for every item in the array\n              - returns true to keep the item and false to get rid of it\n              - 'meetup' param is/iterates every value in the prevUserFavorites array*/}\n  function removeFavoriteHandler(meetupId){\n    setUserFavorites(prevUsersFavorites => {\n        return prevUsersFavorites.filter((meetup) => meetup.id !== meetupId);\n    })\n  }\n      {/* This returns true or false\n          - .some wants function for argument with 'method' contains/iterates every value for userFavorites*/}\n  function itemIsFavoriteHandler(meetupId){\n    return userFavorites.some(meetup => meetup.id === meetupId)\n  }\n  \n      {/* holds the updated context values from use state \n          - Stores functions which can be access/called by other components*/}\n  const context = {\n    favorites: userFavorites,\n    totalFavorites: userFavorites.length,\n    addFavorite: addFavoriteHandler,\n    removeFavorite: removeFavoriteHandler,\n    itemIsFavorite: itemIsFavoriteHandler,\n  };\n\n\n  {/*FavoritesContext.Provider\n      -.Provider is a component that createContext or FavoritesContext has built in\n      -Open and close tags need to be wrapped around all components that are interested in interacting with FavoritesContext \n      - value={context}, context is a value that is used with use state and other functions to keep the conext up to date*/\n  }\n  {/* The FavoriteContextProvider will be used in index.js to wrap around the entire app,\n      - FavoriteContextProvider takes a prop which will be the any comonents that FavoriteContextProvider wraps around \n      - those props have are called children since nested in between this component function*/\n  }\n  return (\n    <FavoritesContext.Provider value={context}>\n      {props.children}\n    </FavoritesContext.Provider>\n  );\n}\n\nexport default FavoritesContext;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhD,CAAC;AACD;AACA;AACA,OAHC;AAID,MAAMC,gBAAgB,gBAAGJ,aAAa,CAAC;EACrCK,SAAS,EAAE,EAAE;EACbC,cAAc,EAAE,CAAC;EACjBC,WAAW,EAAGC,cAAc,IAAK,CAAC,CAAC;EACnCC,cAAc,EAAGC,QAAQ,IAAK,CAAC,CAAC;EAChCC,cAAc,EAAGC,QAAQ,IAAK,CAAC;AACjC,CAAC,CAAC;AAAC,CAAC;AAGJ,CAAC;AACD,kGADC;AAED,OAAO,SAASC,wBAAwBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAE1C,CAAC;EACL,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAGlD,CAAC;AACP;AACA;AACA,mEAHO;EAIL,SAASiB,kBAAkBA,CAACV,cAAc,EAAC;IACzCS,gBAAgB,CAAEE,kBAAkB,IAAK;MACrC,OAAOA,kBAAkB,CAACC,MAAM,CAACZ,cAAc,CAAC;IACpD,CAAC,CAAC;EACJ;EAEI,CAAC;AACP;AACA;AACA;AACA;AACA,mFALO;EAML,SAASa,qBAAqBA,CAACT,QAAQ,EAAC;IACtCK,gBAAgB,CAACE,kBAAkB,IAAI;MACnC,OAAOA,kBAAkB,CAACG,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAACC,EAAE,KAAKZ,QAAQ,CAAC;IACxE,CAAC,CAAC;EACJ;EACI,CAAC;AACP,yGADO;EAEL,SAASa,qBAAqBA,CAACb,QAAQ,EAAC;IACtC,OAAOI,aAAa,CAACU,IAAI,CAACH,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKZ,QAAQ,CAAC;EAC7D;EAEI,CAAC;AACP,yEADO;EAEL,MAAMe,OAAO,GAAG;IACdtB,SAAS,EAAEW,aAAa;IACxBV,cAAc,EAAEU,aAAa,CAACY,MAAM;IACpCrB,WAAW,EAAEW,kBAAkB;IAC/BT,cAAc,EAAEY,qBAAqB;IACrCV,cAAc,EAAEc;EAClB,CAAC;EAGD,CAAC;AACH;AACA;AACA;EAHG;EAKD,CAAC;AACH;AACA;EAFG;EAID,oBACEtB,OAAA,CAACC,gBAAgB,CAACyB,QAAQ;IAACC,KAAK,EAAEH,OAAQ;IAAAI,QAAA,EACvCjB,KAAK,CAACiB;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACW;AAEhC;AAACpB,EAAA,CA1DeF,wBAAwB;AAAAuB,EAAA,GAAxBvB,wBAAwB;AA4DxC,eAAeT,gBAAgB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}